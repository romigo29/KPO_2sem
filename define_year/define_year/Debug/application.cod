; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33521.0 

	TITLE	D:\BSTU\2 семестр\КПО\Лабораторная 1 и 3\define_year\define_year\Debug\application.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__32E3D3D2_xkeycheck@h DB 01H
__CFD6EDFA_yvals_core@h DB 01H
__10D4A829_limits@h DB 01H
__9CD02892_climits DB 01H
__1B0272D9_corecrt@h DB 01H
__A3D3E4E8_vcruntime_new@h DB 01H
__8D1A214D_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__497BC13E_crtdefs@h DB 01H
__DDE8D0E0_use_ansi@h DB 01H
__AE7FBCDF_yvals@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__183F0A60_cstdlib DB 01H
__26E6E2A9_xtr1common DB 01H
__F5A7E1DF_intrin0@inl@h DB 01H
__50567835_intrin0@h DB 01H
__A2C9C4CE_cmath DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__1C5946C5_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__54ADA280_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__86D29096_cwchar DB 01H
__C51215A0_iosfwd DB 01H
__BDF4D0CD_cstddef DB 01H
__E4CFD974_initializer_list DB 01H
__AEA28616_stdint@h DB 01H
__A561EB1D_cstdint DB 01H
__7C4A1519_type_traits DB 01H
__2F328FEB_utility DB 01H
__91F58E7E___msvc_iter_core@hpp DB 01H
__C27AFEEB_xutility DB 01H
__D3D649AB_iterator DB 01H
__F7972D0B_share@h DB 01H
__F338F6F9___msvc_system_error_abi@hpp DB 01H
__8178323E_cerrno DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__EEF52EF9_eh@h DB 01H
__85F4241F_vcruntime_exception@h DB 01H
__8124AFA8_exception DB 01H
__BE6CFB00___msvc_sanitizer_annotate_container@hpp DB 01H
__B9985323_float@h DB 01H
__6F1D8D42_cfloat DB 01H
__09FBC026_limits DB 01H
__5003AD96_new DB 01H
__8B28237E_xatomic@h DB 01H
__45A7EC28_xmemory DB 01H
__31746AB4_xstring DB 01H
__086A95F5_stdexcept DB 01H
__8C4E33AA_xcall_once@h DB 01H
__06EAA9D0_xerrc@h DB 01H
__0A9237D2_time@h DB 01H
__647A58C6_ctime DB 01H
__74BE1DAA_xtimec@h DB 01H
__BCA6E753_xthreads@h DB 01H
__62CE9CE4_atomic DB 01H
__3313218A_system_error DB 01H
__851B68E1_vcruntime_typeinfo@h DB 01H
__B2A50DF2_typeinfo DB 01H
__B555CCA8_memory DB 01H
__99109BA7_xfacet DB 01H
__F99E20B2___msvc_xlocinfo_types@hpp DB 01H
__1EC467ED_ctype@h DB 01H
__1392A162_cctype DB 01H
__791C33B7_locale@h DB 01H
__8B93D6B1_clocale DB 01H
__AD2CEE3A_xlocinfo DB 01H
__EE4A1E85_xlocale DB 01H
__94C99929_xiosbase DB 01H
__0ACA2D49_streambuf DB 01H
__70CD7892_xlocnum DB 01H
__A8CE9780_ios DB 01H
__FD5AC441_ostream DB 01H
__9E8AF17B_istream DB 01H
__A00384F4_iostream DB 01H
__CADDE223_stdafx@h DB 01H
__0054FE25_application@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
PUBLIC	??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_03OJJHGHEE@Rus@				; `string'
PUBLIC	??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0DG@BNMDKOH@?B?b?e?d?e?m?n?5?m?e?j?n?p?p?e?r?m?n?e?5?g?m?$OA?w?e?m?h?e?5?d?$OA@ ; `string'
PUBLIC	??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_0BL@POKJLFCK@?C?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@ ; `string'
PUBLIC	??_C@_0CJ@PMJOFNOE@?B?b?e?d?e?m?m?$PL?i?5?d?e?m?$PM?5?h?l?e?e?r?5?o?n?p?$PP?d?j?n?b?$PL?i@ ; `string'
PUBLIC	??_C@_0BH@DELLEHGE@?B?b?e?d?e?m?m?$PL?i?5?l?e?q?$PP?v?5?d?$OA?r?$PL?3?5@ ; `string'
PUBLIC	??_C@_0L@CKPFLKMM@?5?q?e?m?r?$PP?a?p?$PP?5@	; `string'
PUBLIC	??_C@_0CF@FGLPFOCI@?5?c?n?d?s?5?D?e?m?$PM?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?5?b?$PL?o?$OA?d?$OA?e@ ; `string'
PUBLIC	??_C@_02HBBEAGB@?B?5@				; `string'
PUBLIC	??_C@_0BH@LCIPDNKK@?B?b?e?d?h?r?e?5?r?e?j?s?y?s?$PO?5?d?$OA?r?s?3?5@ ; `string'
PUBLIC	??_C@_0BM@BOAOEIME@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@ ; `string'
PUBLIC	??_C@_0CA@KMMMPCFB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?5?d?m?e?i?3?5@ ; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:PROC
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
EXTRN	?isDateValid@@YA_NPAD@Z:PROC			; isDateValid
EXTRN	?isYearLeap@@YAHH@Z:PROC			; isYearLeap
EXTRN	?getDay@@YAHPAD@Z:PROC				; getDay
EXTRN	?getMonth@@YAHPAD@Z:PROC			; getMonth
EXTRN	?getYear@@YAHPAD@Z:PROC				; getYear
EXTRN	?getOrderOfDay@@YAHHHHPAH@Z:PROC		; getOrderOfDay
EXTRN	?leftUntilBirthday@@YAHPAD0PAH@Z:PROC		; leftUntilBirthday
EXTRN	?getMonthName@@YAPBDH@Z:PROC			; getMonthName
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CA@KMMMPCFB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?5?d?m?e?i?3?5@
CONST	SEGMENT
??_C@_0CA@KMMMPCFB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?5?d?m?e?i?3?5@ DB 0c4H
	DB	0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, ' ', 0eeH, 0f1H, 0f2H, 0e0H, 0ebH, 0eeH, 0f1H
	DB	0fcH, ' ', 0e4H, 0edH, 0e5H, 0e9H, ': ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BOAOEIME@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
CONST	SEGMENT
??_C@_0BM@BOAOEIME@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH
	DB	0e8H, 0ffH, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCIPDNKK@?B?b?e?d?h?r?e?5?r?e?j?s?y?s?$PO?5?d?$OA?r?s?3?5@
CONST	SEGMENT
??_C@_0BH@LCIPDNKK@?B?b?e?d?h?r?e?5?r?e?j?s?y?s?$PO?5?d?$OA?r?s?3?5@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0f2H, 0e5H, 0eaH, 0f3H
	DB	0f9H, 0f3H, 0feH, ' ', 0e4H, 0e0H, 0f2H, 0f3H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HBBEAGB@?B?5@
CONST	SEGMENT
??_C@_02HBBEAGB@?B?5@ DB 0c2H, ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FGLPFOCI@?5?c?n?d?s?5?D?e?m?$PM?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?5?b?$PL?o?$OA?d?$OA?e@
CONST	SEGMENT
??_C@_0CF@FGLPFOCI@?5?c?n?d?s?5?D?e?m?$PM?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?5?b?$PL?o?$OA?d?$OA?e@ DB ' '
	DB	0e3H, 0eeH, 0e4H, 0f3H, ' ', 0c4H, 0e5H, 0edH, 0fcH, ' ', 0efH
	DB	0f0H, 0eeH, 0e3H, 0f0H, 0e0H, 0ecH, 0ecH, 0e8H, 0f1H, 0f2H, 0e0H
	DB	' ', 0e2H, 0fbH, 0efH, 0e0H, 0e4H, 0e0H, 0e5H, 0f2H, ' ', 0edH
	DB	0e0H, ' ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CKPFLKMM@?5?q?e?m?r?$PP?a?p?$PP?5@
CONST	SEGMENT
??_C@_0L@CKPFLKMM@?5?q?e?m?r?$PP?a?p?$PP?5@ DB ' ', 0f1H, 0e5H, 0edH, 0f2H
	DB	0ffH, 0e1H, 0f0H, 0ffH, ' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DELLEHGE@?B?b?e?d?e?m?m?$PL?i?5?l?e?q?$PP?v?5?d?$OA?r?$PL?3?5@
CONST	SEGMENT
??_C@_0BH@DELLEHGE@?B?b?e?d?e?m?m?$PL?i?5?l?e?q?$PP?v?5?d?$OA?r?$PL?3?5@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0edH, 0fbH, 0e9H, ' ', 0ecH, 0e5H
	DB	0f1H, 0ffH, 0f6H, ' ', 0e4H, 0e0H, 0f2H, 0fbH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PMJOFNOE@?B?b?e?d?e?m?m?$PL?i?5?d?e?m?$PM?5?h?l?e?e?r?5?o?n?p?$PP?d?j?n?b?$PL?i@
CONST	SEGMENT
??_C@_0CJ@PMJOFNOE@?B?b?e?d?e?m?m?$PL?i?5?d?e?m?$PM?5?h?l?e?e?r?5?o?n?p?$PP?d?j?n?b?$PL?i@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0edH, 0fbH, 0e9H, ' ', 0e4H, 0e5H
	DB	0edH, 0fcH, ' ', 0e8H, 0ecH, 0e5H, 0e5H, 0f2H, ' ', 0efH, 0eeH
	DB	0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH, 0eeH
	DB	0ecH, 0e5H, 0f0H, ' - ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@POKJLFCK@?C?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@
CONST	SEGMENT
??_C@_0BL@POKJLFCK@?C?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@ DB 0c3H
	DB	0eeH, 0e4H, ' ', 0edH, 0e5H, ' ', 0ffH, 0e2H, 0ebH, 0ffH, 0e5H
	DB	0f2H, 0f1H, 0ffH, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H
	DB	0edH, 0fbH, 0ecH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0c3H, 0eeH, 0e4H, ' '
	DB	0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BNMDKOH@?B?b?e?d?e?m?n?5?m?e?j?n?p?p?e?r?m?n?e?5?g?m?$OA?w?e?m?h?e?5?d?$OA@
CONST	SEGMENT
??_C@_0DG@BNMDKOH@?B?b?e?d?e?m?n?5?m?e?j?n?p?p?e?r?m?n?e?5?g?m?$OA?w?e?m?h?e?5?d?$OA@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0eeH, ' ', 0edH, 0e5H, 0eaH, 0eeH
	DB	0f0H, 0f0H, 0e5H, 0f2H, 0edH, 0eeH, 0e5H, ' ', 0e7H, 0edH, 0e0H
	DB	0f7H, 0e5H, 0edH, 0e8H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0fbH, '. '
	DB	0cfH, 0eeH, 0efH, 0f0H, 0eeH, 0e1H, 0f3H, 0e9H, 0f2H, 0e5H, ' '
	DB	0e5H, 0f9H, 0e5H, ' ', 0f0H, 0e0H, 0e7H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, ':', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus@ DB 'Rus', 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	02eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	02fcH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$0
__tryblocktable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$4
__unwindtable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	031H
	DW	03faH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	04a3H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	028H
	DB	035H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	030H
	DW	017dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 100  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __9E8AF17B_istream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 101  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 102  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 98   :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0001e	b9 03 00 00 00	 mov	 ecx, 3
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __9E8AF17B_istream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	8b f4		 mov	 esi, esp
  0005e	0f b6 45 0c	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  00062	50		 push	 eax
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0006e	3b f4		 cmp	 esi, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00078	88 42 04	 mov	 BYTE PTR [edx+4], al
  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00082	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 83   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __9E8AF17B_istream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 84   :             const auto _Rdbuf = _Myistr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 85   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN2@Sentry_bas

; 86   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Sentry_bas:

; 87   :             }
; 88   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 76   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __9E8AF17B_istream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 77   :             const auto _Rdbuf = _Myistr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 78   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 1523 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __45A7EC28_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val2_0>$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z PROC ; std::exchange<std::_Facet_base *,std::nullptr_t>, COMDAT

; 760  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2F328FEB_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 761  :     // assign _New_val to _Val, return previous _Val
; 762  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d f8	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 763  :     _Val         = static_cast<_Other&&>(_New_val);

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __New_val$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	89 10		 mov	 DWORD PTR [eax], edx

; 764  :     return _Old_val;

  00037	8b 45 f8	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 765  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ENDP ; std::exchange<std::_Facet_base *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\istream
;	COMDAT ??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
_TEXT	SEGMENT
tv227 = -348						; size = 4
tv231 = -344						; size = 4
tv230 = -344						; size = 4
tv65 = -344						; size = 4
tv232 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 8
__Ch$4 = -113						; size = 1
__Meta$5 = -104						; size = 4
__Width$6 = -92						; size = 4
__Count$7 = -80						; size = 4
__Ctype_fac$8 = -68					; size = 4
__Ok$ = -56						; size = 8
__Current$ = -40					; size = 4
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Size$ = 12						; size = 4
__Str$ = 16						; size = 4
??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z PROC ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >, COMDAT

; 778  :     basic_istream<_Elem, _Traits>& _Istr, size_t _Size, _Elem* _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-156]
  00021	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __9E8AF17B_istream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 779  :     using _Myis              = basic_istream<_Elem, _Traits>;
; 780  :     using _Ctype             = ctype<_Elem>;
; 781  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 782  :     size_t _Current          = 0;

  00055	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Current$[ebp], 0

; 783  :     const typename _Myis::sentry _Ok(_Istr);

  0005c	6a 00		 push	 0
  0005e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00061	50		 push	 eax
  00062	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 784  : 
; 785  :     if (_Ok) { // state okay, extract characters

  00071	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00074	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00079	0f b6 c0	 movzx	 eax, al
  0007c	85 c0		 test	 eax, eax
  0007e	0f 84 e3 01 00
	00		 je	 $LN19@Istream_ex

; 786  :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00084	8b f4		 mov	 esi, esp
  00086	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00090	8b 11		 mov	 edx, DWORD PTR [ecx]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00095	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0009e	3b f4		 cmp	 esi, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  000ab	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  000b1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv227[ebp], eax
  000b7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000bb	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv227[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000c7	83 c4 04	 add	 esp, 4
  000ca	89 45 bc	 mov	 DWORD PTR __Ctype_fac$8[ebp], eax
  000cd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000d1	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000d7	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 787  : 
; 788  :         _TRY_IO_BEGIN

  000dc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 789  :         size_t _Count       = _Size;

  000e0	8b 45 0c	 mov	 eax, DWORD PTR __Size$[ebp]
  000e3	89 45 b0	 mov	 DWORD PTR __Count$7[ebp], eax

; 790  :         const size_t _Width = static_cast<size_t>(_Istr.width());

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	89 45 a4	 mov	 DWORD PTR __Width$6[ebp], eax

; 791  :         if (_Width > 0 && _Width < _Size) {

  00105	83 7d a4 00	 cmp	 DWORD PTR __Width$6[ebp], 0
  00109	76 0e		 jbe	 SHORT $LN7@Istream_ex
  0010b	8b 45 a4	 mov	 eax, DWORD PTR __Width$6[ebp]
  0010e	3b 45 0c	 cmp	 eax, DWORD PTR __Size$[ebp]
  00111	73 06		 jae	 SHORT $LN7@Istream_ex

; 792  :             _Count = _Width;

  00113	8b 45 a4	 mov	 eax, DWORD PTR __Width$6[ebp]
  00116	89 45 b0	 mov	 DWORD PTR __Count$7[ebp], eax
$LN7@Istream_ex:

; 793  :         }
; 794  : 
; 795  :         typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();

  00119	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0011c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00121	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00124	8b f4		 mov	 esi, esp
  00126	8b ca		 mov	 ecx, edx
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0012e	3b f4		 cmp	 esi, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b f4		 mov	 esi, esp
  00137	8b c8		 mov	 ecx, eax
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  0013f	3b f4		 cmp	 esi, esp
  00141	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00146	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
  0014c	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv230[ebp]
  00152	89 45 98	 mov	 DWORD PTR __Meta$5[ebp], eax

; 796  :         _Elem _Ch;
; 797  : 
; 798  :         for (; _Current < _Count - 1; _Meta = _Istr.rdbuf()->snextc(), (void) ++_Current) {

  00155	eb 45		 jmp	 SHORT $LN4@Istream_ex
$LN2@Istream_ex:
  00157	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0015a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015c	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0015f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00162	8b f4		 mov	 esi, esp
  00164	8b ca		 mov	 ecx, edx
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	8b f4		 mov	 esi, esp
  00175	8b c8		 mov	 ecx, eax
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  0017d	3b f4		 cmp	 esi, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], eax
  0018a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv231[ebp]
  00190	89 45 98	 mov	 DWORD PTR __Meta$5[ebp], eax
  00193	8b 4d d8	 mov	 ecx, DWORD PTR __Current$[ebp]
  00196	83 c1 01	 add	 ecx, 1
  00199	89 4d d8	 mov	 DWORD PTR __Current$[ebp], ecx
$LN4@Istream_ex:
  0019c	8b 45 b0	 mov	 eax, DWORD PTR __Count$7[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	39 45 d8	 cmp	 DWORD PTR __Current$[ebp], eax
  001a5	0f 83 84 00 00
	00		 jae	 $LN3@Istream_ex

; 799  :             if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  001ab	8b 45 98	 mov	 eax, DWORD PTR __Meta$5[ebp]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001ba	83 c4 08	 add	 esp, 8
  001bd	0f b6 c8	 movzx	 ecx, al
  001c0	85 c9		 test	 ecx, ecx
  001c2	74 0d		 je	 SHORT $LN8@Istream_ex

; 800  :                 _State |= ios_base::eofbit;

  001c4	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001c7	83 c8 01	 or	 eax, 1
  001ca	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 801  :                 break;

  001cd	eb 60		 jmp	 SHORT $LN3@Istream_ex
  001cf	eb 59		 jmp	 SHORT $LN11@Istream_ex
$LN8@Istream_ex:

; 802  :             } else if (_Ctype_fac.is(_Ctype::space, _Ch = _Traits::to_char_type(_Meta)) || _Ch == _Elem()) {

  001d1	8b 45 98	 mov	 eax, DWORD PTR __Meta$5[ebp]
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  001da	83 c4 04	 add	 esp, 4
  001dd	88 45 8f	 mov	 BYTE PTR __Ch$4[ebp], al
  001e0	8b f4		 mov	 esi, esp
  001e2	0f b6 4d 8f	 movzx	 ecx, BYTE PTR __Ch$4[ebp]
  001e6	51		 push	 ecx
  001e7	6a 48		 push	 72			; 00000048H
  001e9	8b 4d bc	 mov	 ecx, DWORD PTR __Ctype_fac$8[ebp]
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  001f2	3b f4		 cmp	 esi, esp
  001f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f9	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv232[ebp], al
  001ff	0f b6 95 ab fe
	ff ff		 movzx	 edx, BYTE PTR tv232[ebp]
  00206	85 d2		 test	 edx, edx
  00208	75 08		 jne	 SHORT $LN12@Istream_ex
  0020a	0f be 45 8f	 movsx	 eax, BYTE PTR __Ch$4[ebp]
  0020e	85 c0		 test	 eax, eax
  00210	75 04		 jne	 SHORT $LN10@Istream_ex
$LN12@Istream_ex:

; 803  :                 break; // whitespace or nul, quit

  00212	eb 1b		 jmp	 SHORT $LN3@Istream_ex

; 804  :             } else {

  00214	eb 14		 jmp	 SHORT $LN11@Istream_ex
$LN10@Istream_ex:

; 805  :                 _Str[_Current] = _Traits::to_char_type(_Meta); // add it to string

  00216	8b 45 98	 mov	 eax, DWORD PTR __Meta$5[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  0021f	83 c4 04	 add	 esp, 4
  00222	8b 4d 10	 mov	 ecx, DWORD PTR __Str$[ebp]
  00225	03 4d d8	 add	 ecx, DWORD PTR __Current$[ebp]
  00228	88 01		 mov	 BYTE PTR [ecx], al
$LN11@Istream_ex:

; 806  :             }
; 807  :         }

  0022a	e9 28 ff ff ff	 jmp	 $LN2@Istream_ex
$LN3@Istream_ex:
  0022f	eb 26		 jmp	 SHORT $LN15@Istream_ex
__catch$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$0:

; 808  :         _CATCH_IO_(ios_base, _Istr)

  00231	8b f4		 mov	 esi, esp
  00233	6a 01		 push	 1
  00235	6a 04		 push	 4
  00237	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0023a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023c	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0023f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00242	8b ca		 mov	 ecx, edx
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0024a	3b f4		 cmp	 esi, esp
  0024c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00251	b8 00 00 00 00	 mov	 eax, $LN20@Istream_ex
  00256	c3		 ret	 0
$LN15@Istream_ex:
  00257	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0025e	eb 07		 jmp	 SHORT $LN19@Istream_ex
$LN20@Istream_ex:
  00260	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN19@Istream_ex:

; 809  :     }
; 810  :     _Analysis_assume_(static_cast<size_t>(_Current) < _Size); // TRANSITION, VSO-860375
; 811  :     _Str[_Current] = _Elem(); // add terminating null character

  00267	8b 45 10	 mov	 eax, DWORD PTR __Str$[ebp]
  0026a	03 45 d8	 add	 eax, DWORD PTR __Current$[ebp]
  0026d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 812  :     _Istr.width(0);

  00270	8b f4		 mov	 esi, esp
  00272	6a 00		 push	 0
  00274	6a 00		 push	 0
  00276	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00279	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027b	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0027e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00281	8b ca		 mov	 ecx, edx
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00289	3b f4		 cmp	 esi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 813  :     if (_Current == 0) {

  00290	83 7d d8 00	 cmp	 DWORD PTR __Current$[ebp], 0
  00294	75 09		 jne	 SHORT $LN13@Istream_ex

; 814  :         _State |= ios_base::failbit;

  00296	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00299	83 c8 02	 or	 eax, 2
  0029c	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@Istream_ex:

; 815  :     }
; 816  :     _Istr.setstate(_State);

  0029f	8b f4		 mov	 esi, esp
  002a1	6a 00		 push	 0
  002a3	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002a6	50		 push	 eax
  002a7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  002aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ac	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  002af	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002b8	3b f4		 cmp	 esi, esp
  002ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 817  :     return _Istr;

  002bf	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002c2	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  002c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002cf	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002d2	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  002d7	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 818  : }

  002dd	52		 push	 edx
  002de	8b cd		 mov	 ecx, ebp
  002e0	50		 push	 eax
  002e1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@Istream_ex
  002e7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002ec	58		 pop	 eax
  002ed	5a		 pop	 edx
  002ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f8	59		 pop	 ecx
  002f9	5f		 pop	 edi
  002fa	5e		 pop	 esi
  002fb	5b		 pop	 ebx
  002fc	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ff	33 cd		 xor	 ecx, ebp
  00301	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00306	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  0030c	3b ec		 cmp	 ebp, esp
  0030e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c3		 ret	 0
  00317	90		 npad	 1
$LN24@Istream_ex:
  00318	01 00 00 00	 DD	 1
  0031c	00 00 00 00	 DD	 $LN23@Istream_ex
$LN23@Istream_ex:
  00320	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00324	08 00 00 00	 DD	 8
  00328	00 00 00 00	 DD	 $LN21@Istream_ex
$LN21@Istream_ex:
  0032c	5f		 DB	 95			; 0000005fH
  0032d	4f		 DB	 79			; 0000004fH
  0032e	6b		 DB	 107			; 0000006bH
  0032f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$3:
  00008	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ENDP ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 3192 :     _CONSTEXPR23 explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B555CCA8_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	0f b6 8d 2f ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00035	51		 push	 ecx
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00023	50		 push	 eax
  00024	6a 00		 push	 0
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 _memset
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1530 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __45A7EC28_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1531 :         return *this;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1532 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 3277 :     _CONSTEXPR23 pointer release() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B555CCA8_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3278 :         return _STD exchange(_Mypair._Myval2, nullptr);

  0002a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  00034	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
  00044	83 c4 08	 add	 esp, 8

; 3279 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3247 :     _CONSTEXPR23 ~unique_ptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B555CCA8_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3248 :         if (_Mypair._Myval2) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	74 15		 je	 SHORT $LN2@unique_ptr

; 3249 :             _Mypair._Get_first()(_Mypair._Myval2);

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	51		 push	 ecx
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN2@unique_ptr:

; 3250 :         }
; 3251 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
tv70 = -220						; size = 4
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 3137 :     _CONSTEXPR23 void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B555CCA8_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3138 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3139 :         delete _Ptr;

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00033	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR $T1[ebp], 0
  0003a	74 25		 je	 SHORT $LN3@operator
  0003c	8b f4		 mov	 esi, esp
  0003e	6a 01		 push	 1
  00040	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	ff d0		 call	 eax
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0005f	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00061	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN4@operator:

; 3140 :     }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 128  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 129  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 130  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -217						; size = 1
__Zero_uncaught_exceptions$ = -17			; size = 1
_this$ = -8						; size = 4
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0002a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002f	0f b6 c0	 movzx	 eax, al
  00032	85 c0		 test	 eax, eax
  00034	75 09		 jne	 SHORT $LN4@sentry
  00036	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0003d	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0003f	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00046	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0004c	88 4d ef	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  0004f	0f b6 45 ef	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00053	85 c0		 test	 eax, eax
  00055	74 14		 je	 SHORT $LN2@sentry

; 123  :                 this->_Myostr._Osfx();

  00057	8b f4		 mov	 esi, esp
  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 124  :             }
; 125  :         }

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 97   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 98   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 99   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 105  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 110  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 84   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN2@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Sentry_bas:

; 86   :             }
; 87   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 77   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN2@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Sentry_bas:

; 79   :             }
; 80   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\istream
;	COMDAT ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z PROC ; std::operator>><char,std::char_traits<char> >, COMDAT

; 843  : basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr, _Elem* _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9E8AF17B_istream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 844  :     return _Istream_extract_into_buffer(_Istr, SIZE_MAX, _Str);

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00024	50		 push	 eax
  00025	6a ff		 push	 -1
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 845  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ENDP ; std::operator>><char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1010 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1011 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1012 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1013 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1014 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -308						; size = 8
tv337 = -300						; size = 8
tv323 = -292						; size = 8
tv284 = -292						; size = 8
tv285 = -288						; size = 4
tv137 = -288						; size = 4
$T2 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 766  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  0001e	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __FD5AC441_ostream
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 767  :     // insert NTBS into char stream
; 768  :     using _Elem = char;
; 769  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 770  : 
; 771  :     ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 772  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005b	83 c4 04	 add	 esp, 4
  0005e	33 c9		 xor	 ecx, ecx
  00060	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00063	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 773  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0006e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00071	8b f4		 mov	 esi, esp
  00073	8b ca		 mov	 ecx, edx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  00088	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv323[ebp+4], edx
  0008e	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR tv323[ebp+4], 0
  00095	7c 79		 jl	 SHORT $LN17@operator
  00097	7f 09		 jg	 SHORT $LN24@operator
  00099	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR tv323[ebp], 0
  000a0	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000aa	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ad	8b f4		 mov	 esi, esp
  000af	8b ca		 mov	 ecx, edx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv337[ebp], eax
  000c4	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv337[ebp+4], edx
  000ca	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR tv337[ebp+4]
  000d0	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d3	7c 3b		 jl	 SHORT $LN17@operator
  000d5	7f 0b		 jg	 SHORT $LN25@operator
  000d7	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv337[ebp]
  000dd	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e0	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e5	8b 02		 mov	 eax, DWORD PTR [edx]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ea	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000ed	8b f4		 mov	 esi, esp
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000ff	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00102	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00108	89 95 d0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  0010e	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00110	0f 57 c0	 xorps	 xmm0, xmm0
  00113	66 0f 13 85 cc
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011b	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00121	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00127	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012a	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 774  :     const typename _Myos::sentry _Ok(_Ostr);

  0012d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00130	50		 push	 eax
  00131	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00134	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00139	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  :     if (!_Ok) {

  00140	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00143	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00148	0f b6 c0	 movzx	 eax, al
  0014b	85 c0		 test	 eax, eax
  0014d	75 0e		 jne	 SHORT $LN8@operator

; 777  :         _State |= ios_base::badbit;

  0014f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00152	83 c8 04	 or	 eax, 4
  00155	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 778  :     } else { // state okay, insert

  00158	e9 40 02 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 779  :         _TRY_IO_BEGIN

  0015d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 780  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00161	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00169	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016c	8b f4		 mov	 esi, esp
  0016e	8b ca		 mov	 ecx, edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00182	83 f8 40	 cmp	 eax, 64			; 00000040H
  00185	0f 84 a3 00 00
	00		 je	 $LN3@operator

; 781  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0018b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0018d	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00190	83 e8 01	 sub	 eax, 1
  00193	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00196	83 d9 00	 sbb	 ecx, 0
  00199	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  0019c	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  0019f	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a3	0f 8c 85 00 00
	00		 jl	 $LN3@operator
  001a9	7f 06		 jg	 SHORT $LN26@operator
  001ab	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001af	76 7d		 jbe	 SHORT $LN3@operator
$LN26@operator:

; 782  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001b1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001b9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001bc	8b f4		 mov	 esi, esp
  001be	8b ca		 mov	 ecx, edx
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001c6	3b f4		 cmp	 esi, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	8b f4		 mov	 esi, esp
  001cf	0f b6 c0	 movzx	 eax, al
  001d2	50		 push	 eax
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001db	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001de	8b fc		 mov	 edi, esp
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001e6	3b fc		 cmp	 edi, esp
  001e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ed	8b c8		 mov	 ecx, eax
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001f5	3b f4		 cmp	 esi, esp
  001f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fc	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00202	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00214	83 c4 08	 add	 esp, 8
  00217	0f b6 c8	 movzx	 ecx, al
  0021a	85 c9		 test	 ecx, ecx
  0021c	74 0b		 je	 SHORT $LN12@operator

; 783  :                     _State |= ios_base::badbit; // insertion failed, quit

  0021e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00221	83 c8 04	 or	 eax, 4
  00224	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 784  :                     break;

  00227	eb 05		 jmp	 SHORT $LN3@operator
$LN12@operator:

; 785  :                 }
; 786  :             }

  00229	e9 5f ff ff ff	 jmp	 $LN2@operator
$LN3@operator:

; 787  :         }
; 788  : 
; 789  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0022e	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00232	75 64		 jne	 SHORT $LN13@operator
  00234	8b f4		 mov	 esi, esp
  00236	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00239	50		 push	 eax
  0023a	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00241	52		 push	 edx
  00242	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0024a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0024d	8b fc		 mov	 edi, esp
  0024f	8b ca		 mov	 ecx, edx
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00257	3b fc		 cmp	 edi, esp
  00259	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025e	8b c8		 mov	 ecx, eax
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00266	3b f4		 cmp	 esi, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00273	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp+4], edx
  00279	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv284[ebp]
  0027f	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00282	75 0b		 jne	 SHORT $LN27@operator
  00284	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp+4]
  0028a	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  0028d	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 790  :             _State |= ios_base::badbit;

  0028f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00292	83 c8 04	 or	 eax, 4
  00295	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 791  :         }
; 792  : 
; 793  :         if (_State == ios_base::goodbit) {

  00298	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0029c	0f 85 a3 00 00
	00		 jne	 $LN6@operator

; 794  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002a2	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a4	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002a7	83 e8 01	 sub	 eax, 1
  002aa	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ad	83 d9 00	 sbb	 ecx, 0
  002b0	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002b3	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002b6	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002ba	0f 8c 85 00 00
	00		 jl	 $LN6@operator
  002c0	7f 06		 jg	 SHORT $LN28@operator
  002c2	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002c6	76 7d		 jbe	 SHORT $LN6@operator
$LN28@operator:

; 795  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d3	8b f4		 mov	 esi, esp
  002d5	8b ca		 mov	 ecx, edx
  002d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002dd	3b f4		 cmp	 esi, esp
  002df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e4	8b f4		 mov	 esi, esp
  002e6	0f b6 c0	 movzx	 eax, al
  002e9	50		 push	 eax
  002ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002f2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002f5	8b fc		 mov	 edi, esp
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002fd	3b fc		 cmp	 edi, esp
  002ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00304	8b c8		 mov	 ecx, eax
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0030c	3b f4		 cmp	 esi, esp
  0030e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00313	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00319	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv285[ebp]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0032b	83 c4 08	 add	 esp, 8
  0032e	0f b6 c8	 movzx	 ecx, al
  00331	85 c9		 test	 ecx, ecx
  00333	74 0b		 je	 SHORT $LN15@operator

; 796  :                     _State |= ios_base::badbit; // insertion failed, quit

  00335	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00338	83 c8 04	 or	 eax, 4
  0033b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 797  :                     break;

  0033e	eb 05		 jmp	 SHORT $LN6@operator
$LN15@operator:

; 798  :                 }
; 799  :             }

  00340	e9 5f ff ff ff	 jmp	 $LN5@operator
$LN6@operator:

; 800  :         }
; 801  : 
; 802  :         _Ostr.width(0);

  00345	8b f4		 mov	 esi, esp
  00347	6a 00		 push	 0
  00349	6a 00		 push	 0
  0034b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0034e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00350	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00353	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00356	8b ca		 mov	 ecx, edx
  00358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  :         _CATCH_IO_(ios_base, _Ostr)

  00367	8b f4		 mov	 esi, esp
  00369	6a 01		 push	 1
  0036b	6a 04		 push	 4
  0036d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00370	8b 08		 mov	 ecx, DWORD PTR [eax]
  00372	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00375	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00378	8b ca		 mov	 ecx, edx
  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00380	3b f4		 cmp	 esi, esp
  00382	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00387	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0038c	c3		 ret	 0
$LN19@operator:
  0038d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00394	eb 07		 jmp	 SHORT $LN22@operator
$LN23@operator:
  00396	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN22@operator:

; 804  :     }
; 805  : 
; 806  :     _Ostr.setstate(_State);

  0039d	8b f4		 mov	 esi, esp
  0039f	6a 00		 push	 0
  003a1	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  003aa	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003ad	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003b6	3b f4		 cmp	 esi, esp
  003b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 807  :     return _Ostr;

  003bd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c0	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003cd	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003d0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003d5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 808  : }

  003db	52		 push	 edx
  003dc	8b cd		 mov	 ecx, ebp
  003de	50		 push	 eax
  003df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  003e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ea	58		 pop	 eax
  003eb	5a		 pop	 edx
  003ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003f6	59		 pop	 ecx
  003f7	5f		 pop	 edi
  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx
  003fa	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fd	33 cd		 xor	 ecx, ebp
  003ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00404	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0040a	3b ec		 cmp	 ebp, esp
  0040c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00411	8b e5		 mov	 esp, ebp
  00413	5d		 pop	 ebp
  00414	c3		 ret	 0
  00415	0f 1f 00	 npad	 3
$LN32@operator:
  00418	01 00 00 00	 DD	 1
  0041c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00420	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00424	08 00 00 00	 DD	 8
  00428	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0042c	5f		 DB	 95			; 0000005fH
  0042d	4f		 DB	 79			; 0000004fH
  0042e	6b		 DB	 107			; 0000006bH
  0042f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\BSTU\2 семестр\КПО\Лабораторная 1 и 3\define_year\define_year\application.cpp
;	COMDAT _main
_TEXT	SEGMENT
_birth_date$ = -164					; size = 9
_current_date$ = -144					; size = 9
_months_list$ = -124					; size = 48
_month$ = -68						; size = 4
_day$ = -56						; size = 4
_leap_year$ = -44					; size = 4
_year$ = -32						; size = 4
_date$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 3    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-168]
  00012	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __0054FE25_application@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4    :     setlocale(LC_ALL, "Rus");

  00032	8b f4		 mov	 esi, esp
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus@
  00039	6a 00		 push	 0
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00041	83 c4 08	 add	 esp, 8
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 5    :      char date[9];
; 6    :      cout << "Введите дату в формате ДДММГГГГ:" << endl;

  0004b	8b f4		 mov	 esi, esp
  0004d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00062	83 c4 08	 add	 esp, 8
  00065	8b c8		 mov	 ecx, eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 7    :      cin >> date;

  00074	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  00077	50		 push	 eax
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
  00084	83 c4 08	 add	 esp, 8

; 8    :      if (!isDateValid(date)) {

  00087	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?isDateValid@@YA_NPAD@Z	; isDateValid
  00090	83 c4 04	 add	 esp, 4
  00093	0f b6 c8	 movzx	 ecx, al
  00096	85 c9		 test	 ecx, ecx
  00098	75 51		 jne	 SHORT $LN3@main
$LN2@main:

; 9    :         while (!isDateValid(date)) {

  0009a	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?isDateValid@@YA_NPAD@Z	; isDateValid
  000a3	83 c4 04	 add	 esp, 4
  000a6	0f b6 c8	 movzx	 ecx, al
  000a9	85 c9		 test	 ecx, ecx
  000ab	75 3e		 jne	 SHORT $LN3@main

; 10   :             cout << "Введено некорретное значение даты. Попробуйте еще раз" << endl; cin >> date;

  000ad	8b f4		 mov	 esi, esp
  000af	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@BNMDKOH@?B?b?e?d?e?m?n?5?m?e?j?n?p?p?e?r?m?n?e?5?g?m?$OA?w?e?m?h?e?5?d?$OA@
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c4	83 c4 08	 add	 esp, 8
  000c7	8b c8		 mov	 ecx, eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  000d9	50		 push	 eax
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
  000e6	83 c4 08	 add	 esp, 8

; 11   :         }

  000e9	eb af		 jmp	 SHORT $LN2@main
$LN3@main:

; 12   :      }
; 13   :      // год, високосный год, день, месяц
; 14   :      int year = getYear(date);

  000eb	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?getYear@@YAHPAD@Z	; getYear
  000f4	83 c4 04	 add	 esp, 4
  000f7	89 45 e0	 mov	 DWORD PTR _year$[ebp], eax

; 15   :      int leap_year = isYearLeap(year);

  000fa	8b 45 e0	 mov	 eax, DWORD PTR _year$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?isYearLeap@@YAHH@Z	; isYearLeap
  00103	83 c4 04	 add	 esp, 4
  00106	89 45 d4	 mov	 DWORD PTR _leap_year$[ebp], eax

; 16   :      int day = getDay(date);

  00109	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?getDay@@YAHPAD@Z	; getDay
  00112	83 c4 04	 add	 esp, 4
  00115	89 45 c8	 mov	 DWORD PTR _day$[ebp], eax

; 17   :      int month = getMonth(date);

  00118	8d 45 ec	 lea	 eax, DWORD PTR _date$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?getMonth@@YAHPAD@Z	; getMonth
  00121	83 c4 04	 add	 esp, 4
  00124	89 45 bc	 mov	 DWORD PTR _month$[ebp], eax

; 18   :      int months_list[] = { 31, 28 + leap_year, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00127	c7 45 84 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp], 31 ; 0000001fH
  0012e	8b 45 d4	 mov	 eax, DWORD PTR _leap_year$[ebp]
  00131	83 c0 1c	 add	 eax, 28			; 0000001cH
  00134	89 45 88	 mov	 DWORD PTR _months_list$[ebp+4], eax
  00137	c7 45 8c 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+8], 31 ; 0000001fH
  0013e	c7 45 90 1e 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+12], 30 ; 0000001eH
  00145	c7 45 94 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+16], 31 ; 0000001fH
  0014c	c7 45 98 1e 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+20], 30 ; 0000001eH
  00153	c7 45 9c 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+24], 31 ; 0000001fH
  0015a	c7 45 a0 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+28], 31 ; 0000001fH
  00161	c7 45 a4 1e 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+32], 30 ; 0000001eH
  00168	c7 45 a8 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+36], 31 ; 0000001fH
  0016f	c7 45 ac 1e 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+40], 30 ; 0000001eH
  00176	c7 45 b0 1f 00
	00 00		 mov	 DWORD PTR _months_list$[ebp+44], 31 ; 0000001fH

; 19   :      //високосность года
; 20   :      if (leap_year) {

  0017d	83 7d d4 00	 cmp	 DWORD PTR _leap_year$[ebp], 0
  00181	74 2b		 je	 SHORT $LN9@main

; 21   :         cout << "Год високосный" << endl;

  00183	8b f4		 mov	 esi, esp
  00185	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0019a	83 c4 08	 add	 esp, 8
  0019d	8b c8		 mov	 ecx, eax
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001a5	3b f4		 cmp	 esi, esp
  001a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   :      }

  001ac	eb 29		 jmp	 SHORT $LN10@main
$LN9@main:

; 23   :      else {
; 24   :         cout << "Год не является високосным" << endl;

  001ae	8b f4		 mov	 esi, esp
  001b0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@POKJLFCK@?C?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001c5	83 c4 08	 add	 esp, 8
  001c8	8b c8		 mov	 ecx, eax
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001d0	3b f4		 cmp	 esi, esp
  001d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@main:

; 25   :             }
; 26   :      // порядковый номер + название месяца + день программиста
; 27   :      cout << "Введенный день имеет порядковый номер - " << getOrderOfDay(leap_year, day, month, months_list) << endl;

  001d7	8b f4		 mov	 esi, esp
  001d9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001de	8d 45 84	 lea	 eax, DWORD PTR _months_list$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d bc	 mov	 ecx, DWORD PTR _month$[ebp]
  001e5	51		 push	 ecx
  001e6	8b 55 c8	 mov	 edx, DWORD PTR _day$[ebp]
  001e9	52		 push	 edx
  001ea	8b 45 d4	 mov	 eax, DWORD PTR _leap_year$[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ?getOrderOfDay@@YAHHHHPAH@Z ; getOrderOfDay
  001f3	83 c4 10	 add	 esp, 16			; 00000010H
  001f6	8b fc		 mov	 edi, esp
  001f8	50		 push	 eax
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PMJOFNOE@?B?b?e?d?e?m?m?$PL?i?5?d?e?m?$PM?5?h?l?e?e?r?5?o?n?p?$PP?d?j?n?b?$PL?i@
  001fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00204	51		 push	 ecx
  00205	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0020a	83 c4 08	 add	 esp, 8
  0020d	8b c8		 mov	 ecx, eax
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00215	3b fc		 cmp	 edi, esp
  00217	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021c	8b c8		 mov	 ecx, eax
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00224	3b f4		 cmp	 esi, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   :      cout << "Введенный месяц даты: " << getMonthName(month) << endl;

  0022b	8b f4		 mov	 esi, esp
  0022d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00232	8b 45 bc	 mov	 eax, DWORD PTR _month$[ebp]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ?getMonthName@@YAPBDH@Z	; getMonthName
  0023b	83 c4 04	 add	 esp, 4
  0023e	50		 push	 eax
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DELLEHGE@?B?b?e?d?e?m?m?$PL?i?5?l?e?q?$PP?v?5?d?$OA?r?$PL?3?5@
  00244	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0024a	51		 push	 ecx
  0024b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00250	83 c4 08	 add	 esp, 8
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00259	83 c4 08	 add	 esp, 8
  0025c	8b c8		 mov	 ecx, eax
  0025e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00264	3b f4		 cmp	 esi, esp
  00266	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 29   : 
; 30   :      cout << "В " << year << " году День программиста выпадает на " << 13 - leap_year << " сентября " << endl;

  0026b	8b f4		 mov	 esi, esp
  0026d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CKPFLKMM@?5?q?e?m?r?$PP?a?p?$PP?5@
  00277	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  0027c	2b 45 d4	 sub	 eax, DWORD PTR _leap_year$[ebp]
  0027f	8b fc		 mov	 edi, esp
  00281	50		 push	 eax
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FGLPFOCI@?5?c?n?d?s?5?D?e?m?$PM?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?5?b?$PL?o?$OA?d?$OA?e@
  00287	8b dc		 mov	 ebx, esp
  00289	8b 4d e0	 mov	 ecx, DWORD PTR _year$[ebp]
  0028c	51		 push	 ecx
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_02HBBEAGB@?B?5@
  00292	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00298	52		 push	 edx
  00299	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0029e	83 c4 08	 add	 esp, 8
  002a1	8b c8		 mov	 ecx, eax
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002a9	3b dc		 cmp	 ebx, esp
  002ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002b6	83 c4 08	 add	 esp, 8
  002b9	8b c8		 mov	 ecx, eax
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002c1	3b fc		 cmp	 edi, esp
  002c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002ce	83 c4 08	 add	 esp, 8
  002d1	8b c8		 mov	 ecx, eax
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002d9	3b f4		 cmp	 esi, esp
  002db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   :      // от текущей даты до др
; 32   :      char current_date[9], birth_date[9];
; 33   :      cout << "Введите текущую дату: " << endl;

  002e0	8b f4		 mov	 esi, esp
  002e2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LCIPDNKK@?B?b?e?d?h?r?e?5?r?e?j?s?y?s?$PO?5?d?$OA?r?s?3?5@
  002ec	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002f7	83 c4 08	 add	 esp, 8
  002fa	8b c8		 mov	 ecx, eax
  002fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00302	3b f4		 cmp	 esi, esp
  00304	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 34   :      cin >> current_date;

  00309	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _current_date$[ebp]
  0030f	50		 push	 eax
  00310	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00316	51		 push	 ecx
  00317	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
  0031c	83 c4 08	 add	 esp, 8

; 35   :      if (!isDateValid(current_date)) {

  0031f	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _current_date$[ebp]
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 ?isDateValid@@YA_NPAD@Z	; isDateValid
  0032b	83 c4 04	 add	 esp, 4
  0032e	0f b6 c8	 movzx	 ecx, al
  00331	85 c9		 test	 ecx, ecx
  00333	75 57		 jne	 SHORT $LN5@main
$LN4@main:

; 36   :         while (!isDateValid(current_date)) {

  00335	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _current_date$[ebp]
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?isDateValid@@YA_NPAD@Z	; isDateValid
  00341	83 c4 04	 add	 esp, 4
  00344	0f b6 c8	 movzx	 ecx, al
  00347	85 c9		 test	 ecx, ecx
  00349	75 41		 jne	 SHORT $LN5@main

; 37   :             cout << "Введено некорретное значение даты. Попробуйте еще раз" << endl; cin >> current_date;

  0034b	8b f4		 mov	 esi, esp
  0034d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@BNMDKOH@?B?b?e?d?e?m?n?5?m?e?j?n?p?p?e?r?m?n?e?5?g?m?$OA?w?e?m?h?e?5?d?$OA@
  00357	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0035c	50		 push	 eax
  0035d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00362	83 c4 08	 add	 esp, 8
  00365	8b c8		 mov	 ecx, eax
  00367	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0036d	3b f4		 cmp	 esi, esp
  0036f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00374	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _current_date$[ebp]
  0037a	50		 push	 eax
  0037b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00381	51		 push	 ecx
  00382	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
  00387	83 c4 08	 add	 esp, 8

; 38   :         }

  0038a	eb a9		 jmp	 SHORT $LN4@main
$LN5@main:

; 39   :      }
; 40   :      cout << "Введите дату дня рождения: " << endl;

  0038c	8b f4		 mov	 esi, esp
  0038e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BOAOEIME@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003a3	83 c4 08	 add	 esp, 8
  003a6	8b c8		 mov	 ecx, eax
  003a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003ae	3b f4		 cmp	 esi, esp
  003b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 41   :      cin >> birth_date;

  003b5	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _birth_date$[ebp]
  003bb	50		 push	 eax
  003bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
  003c8	83 c4 08	 add	 esp, 8

; 42   :      if (!isDateValid(birth_date)) {

  003cb	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _birth_date$[ebp]
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 ?isDateValid@@YA_NPAD@Z	; isDateValid
  003d7	83 c4 04	 add	 esp, 4
  003da	0f b6 c8	 movzx	 ecx, al
  003dd	85 c9		 test	 ecx, ecx
  003df	75 57		 jne	 SHORT $LN7@main
$LN6@main:

; 43   :         while (!isDateValid(birth_date)) {

  003e1	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _birth_date$[ebp]
  003e7	50		 push	 eax
  003e8	e8 00 00 00 00	 call	 ?isDateValid@@YA_NPAD@Z	; isDateValid
  003ed	83 c4 04	 add	 esp, 4
  003f0	0f b6 c8	 movzx	 ecx, al
  003f3	85 c9		 test	 ecx, ecx
  003f5	75 41		 jne	 SHORT $LN7@main

; 44   :             cout << "Введено некорретное значение даты. Попробуйте еще раз" << endl; cin >> birth_date;

  003f7	8b f4		 mov	 esi, esp
  003f9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003fe	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@BNMDKOH@?B?b?e?d?e?m?n?5?m?e?j?n?p?p?e?r?m?n?e?5?g?m?$OA?w?e?m?h?e?5?d?$OA@
  00403	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0040e	83 c4 08	 add	 esp, 8
  00411	8b c8		 mov	 ecx, eax
  00413	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00419	3b f4		 cmp	 esi, esp
  0041b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00420	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _birth_date$[ebp]
  00426	50		 push	 eax
  00427	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0042d	51		 push	 ecx
  0042e	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
  00433	83 c4 08	 add	 esp, 8

; 45   :         }

  00436	eb a9		 jmp	 SHORT $LN6@main
$LN7@main:

; 46   :      }
; 47   :      cout << "До дня рождения осталось дней: " << leftUntilBirthday(current_date, birth_date, months_list) << endl;

  00438	8b f4		 mov	 esi, esp
  0043a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0043f	8d 45 84	 lea	 eax, DWORD PTR _months_list$[ebp]
  00442	50		 push	 eax
  00443	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _birth_date$[ebp]
  00449	51		 push	 ecx
  0044a	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _current_date$[ebp]
  00450	52		 push	 edx
  00451	e8 00 00 00 00	 call	 ?leftUntilBirthday@@YAHPAD0PAH@Z ; leftUntilBirthday
  00456	83 c4 0c	 add	 esp, 12			; 0000000cH
  00459	8b fc		 mov	 edi, esp
  0045b	50		 push	 eax
  0045c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KMMMPCFB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?5?d?m?e?i?3?5@
  00461	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00466	50		 push	 eax
  00467	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0046c	83 c4 08	 add	 esp, 8
  0046f	8b c8		 mov	 ecx, eax
  00471	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00477	3b fc		 cmp	 edi, esp
  00479	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0047e	8b c8		 mov	 ecx, eax
  00480	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00486	3b f4		 cmp	 esi, esp
  00488	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 48   :      return 0;

  0048d	33 c0		 xor	 eax, eax

; 49   : }

  0048f	52		 push	 edx
  00490	8b cd		 mov	 ecx, ebp
  00492	50		 push	 eax
  00493	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@main
  00499	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0049e	58		 pop	 eax
  0049f	5a		 pop	 edx
  004a0	5f		 pop	 edi
  004a1	5e		 pop	 esi
  004a2	5b		 pop	 ebx
  004a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a6	33 cd		 xor	 ecx, ebp
  004a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ad	81 c4 68 01 00
	00		 add	 esp, 360		; 00000168H
  004b3	3b ec		 cmp	 ebp, esp
  004b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ba	8b e5		 mov	 esp, ebp
  004bc	5d		 pop	 ebp
  004bd	c3		 ret	 0
  004be	66 90		 npad	 2
$LN19@main:
  004c0	04 00 00 00	 DD	 4
  004c4	00 00 00 00	 DD	 $LN18@main
$LN18@main:
  004c8	ec ff ff ff	 DD	 -20			; ffffffecH
  004cc	09 00 00 00	 DD	 9
  004d0	00 00 00 00	 DD	 $LN14@main
  004d4	84 ff ff ff	 DD	 -124			; ffffff84H
  004d8	30 00 00 00	 DD	 48			; 00000030H
  004dc	00 00 00 00	 DD	 $LN15@main
  004e0	70 ff ff ff	 DD	 -144			; ffffff70H
  004e4	09 00 00 00	 DD	 9
  004e8	00 00 00 00	 DD	 $LN16@main
  004ec	5c ff ff ff	 DD	 -164			; ffffff5cH
  004f0	09 00 00 00	 DD	 9
  004f4	00 00 00 00	 DD	 $LN17@main
$LN17@main:
  004f8	62		 DB	 98			; 00000062H
  004f9	69		 DB	 105			; 00000069H
  004fa	72		 DB	 114			; 00000072H
  004fb	74		 DB	 116			; 00000074H
  004fc	68		 DB	 104			; 00000068H
  004fd	5f		 DB	 95			; 0000005fH
  004fe	64		 DB	 100			; 00000064H
  004ff	61		 DB	 97			; 00000061H
  00500	74		 DB	 116			; 00000074H
  00501	65		 DB	 101			; 00000065H
  00502	00		 DB	 0
$LN16@main:
  00503	63		 DB	 99			; 00000063H
  00504	75		 DB	 117			; 00000075H
  00505	72		 DB	 114			; 00000072H
  00506	72		 DB	 114			; 00000072H
  00507	65		 DB	 101			; 00000065H
  00508	6e		 DB	 110			; 0000006eH
  00509	74		 DB	 116			; 00000074H
  0050a	5f		 DB	 95			; 0000005fH
  0050b	64		 DB	 100			; 00000064H
  0050c	61		 DB	 97			; 00000061H
  0050d	74		 DB	 116			; 00000074H
  0050e	65		 DB	 101			; 00000065H
  0050f	00		 DB	 0
$LN15@main:
  00510	6d		 DB	 109			; 0000006dH
  00511	6f		 DB	 111			; 0000006fH
  00512	6e		 DB	 110			; 0000006eH
  00513	74		 DB	 116			; 00000074H
  00514	68		 DB	 104			; 00000068H
  00515	73		 DB	 115			; 00000073H
  00516	5f		 DB	 95			; 0000005fH
  00517	6c		 DB	 108			; 0000006cH
  00518	69		 DB	 105			; 00000069H
  00519	73		 DB	 115			; 00000073H
  0051a	74		 DB	 116			; 00000074H
  0051b	00		 DB	 0
$LN14@main:
  0051c	64		 DB	 100			; 00000064H
  0051d	61		 DB	 97			; 00000061H
  0051e	74		 DB	 116			; 00000074H
  0051f	65		 DB	 101			; 00000065H
  00520	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -288						; size = 4
__Psave_guard$3 = -84					; size = 4
__Pfmod$4 = -72						; size = 4
__Pf$5 = -60						; size = 4
__Id$6 = -48						; size = 4
__Psave$7 = -36						; size = 4
__Lock$8 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 416  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0001d	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __EE4A1E85_xlocale
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 417  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00047	8b f4		 mov	 esi, esp
  00049	6a 00		 push	 0
  0004b	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00054	3b f4		 cmp	 esi, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 418  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00067	89 45 dc	 mov	 DWORD PTR __Psave$7[ebp], eax

; 419  : 
; 420  :     const size_t _Id         = _Facet::id;

  0006a	8b f4		 mov	 esi, esp
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	89 45 d0	 mov	 DWORD PTR __Id$6[ebp], eax

; 421  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  00082	8b 45 d0	 mov	 eax, DWORD PTR __Id$6[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  0008e	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 422  : 
; 423  :     if (!_Pf) {

  00091	83 7d c4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  00095	0f 85 9b 00 00
	00		 jne	 $LN6@use_facet

; 424  :         if (_Psave) {

  0009b	83 7d dc 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  0009f	74 0b		 je	 SHORT $LN3@use_facet

; 425  :             _Pf = _Psave; // lazy facet already allocated

  000a1	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000a4	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax
  000a7	e9 8a 00 00 00	 jmp	 $LN6@use_facet
$LN3@use_facet:

; 426  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000ac	8b f4		 mov	 esi, esp
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000b1	50		 push	 eax
  000b2	8d 4d dc	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  000b5	51		 push	 ecx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  000bc	83 c4 08	 add	 esp, 8
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	83 f8 ff	 cmp	 eax, -1
  000c9	75 07		 jne	 SHORT $LN5@use_facet

; 427  : #if _HAS_EXCEPTIONS
; 428  :             _Throw_bad_cast(); // lazy disallowed

  000cb	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 429  : #else
; 430  :             _CSTD abort(); // lazy disallowed
; 431  : #endif
; 432  :         } else { // queue up lazy facet for destruction

  000d0	eb 64		 jmp	 SHORT $LN6@use_facet
$LN5@use_facet:

; 433  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  000d2	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000d5	89 45 b8	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 434  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  000d8	6a 04		 push	 4
  000da	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000dd	e8 00 00 00 00	 call	 ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z
  000e2	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000e9	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  000ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 435  : 
; 436  : #if defined(_M_CEE)
; 437  :             _Facet_Register_m(_Pfmod);
; 438  : #else // ^^^ defined(_M_CEE) / !defined(_M_CEE) vvv
; 439  :             _Facet_Register(_Pfmod);

  000f2	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000fb	83 c4 04	 add	 esp, 4

; 440  : #endif // ^^^ !defined(_M_CEE) ^^^
; 441  : 
; 442  :             _Pfmod->_Incref();

  000fe	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  00101	8b 10		 mov	 edx, DWORD PTR [eax]
  00103	8b f4		 mov	 esi, esp
  00105	8b 4d b8	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  00108	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010b	ff d0		 call	 eax
  0010d	3b f4		 cmp	 esi, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 443  :             _Facetptr<_Facet>::_Psave = _Psave;

  00114	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  00117	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 444  :             _Pf                       = _Psave;

  0011c	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0011f	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 445  : 
; 446  :             (void) _Psave_guard.release();

  00122	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  00125	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 447  :         }

  0012a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0012e	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  00131	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN6@use_facet:

; 448  :     }
; 449  : 
; 450  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00136	8b 45 c4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  00139	89 85 e0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0013f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00146	8b f4		 mov	 esi, esp
  00148	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00151	3b f4		 cmp	 esi, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00158	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@use_facet:

; 451  :     _END_LOCK()
; 452  : } // end of use_facet body

  0015e	52		 push	 edx
  0015f	8b cd		 mov	 ecx, ebp
  00161	50		 push	 eax
  00162	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@use_facet
  00168	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016d	58		 pop	 eax
  0016e	5a		 pop	 edx
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 cd		 xor	 ecx, ebp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0018d	3b ec		 cmp	 ebp, esp
  0018f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c3		 ret	 0
$LN15@use_facet:
  00198	03 00 00 00	 DD	 3
  0019c	00 00 00 00	 DD	 $LN14@use_facet
$LN14@use_facet:
  001a0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  001a4	04 00 00 00	 DD	 4
  001a8	00 00 00 00	 DD	 $LN10@use_facet
  001ac	dc ff ff ff	 DD	 -36			; ffffffdcH
  001b0	04 00 00 00	 DD	 4
  001b4	00 00 00 00	 DD	 $LN11@use_facet
  001b8	ac ff ff ff	 DD	 -84			; ffffffacH
  001bc	04 00 00 00	 DD	 4
  001c0	00 00 00 00	 DD	 $LN12@use_facet
$LN12@use_facet:
  001c4	5f		 DB	 95			; 0000005fH
  001c5	50		 DB	 80			; 00000050H
  001c6	73		 DB	 115			; 00000073H
  001c7	61		 DB	 97			; 00000061H
  001c8	76		 DB	 118			; 00000076H
  001c9	65		 DB	 101			; 00000065H
  001ca	5f		 DB	 95			; 0000005fH
  001cb	67		 DB	 103			; 00000067H
  001cc	75		 DB	 117			; 00000075H
  001cd	61		 DB	 97			; 00000061H
  001ce	72		 DB	 114			; 00000072H
  001cf	64		 DB	 100			; 00000064H
  001d0	00		 DB	 0
$LN11@use_facet:
  001d1	5f		 DB	 95			; 0000005fH
  001d2	50		 DB	 80			; 00000050H
  001d3	73		 DB	 115			; 00000073H
  001d4	61		 DB	 97			; 00000061H
  001d5	76		 DB	 118			; 00000076H
  001d6	65		 DB	 101			; 00000065H
  001d7	00		 DB	 0
$LN10@use_facet:
  001d8	5f		 DB	 95			; 0000005fH
  001d9	4c		 DB	 76			; 0000004cH
  001da	6f		 DB	 111			; 0000006fH
  001db	63		 DB	 99			; 00000063H
  001dc	6b		 DB	 107			; 0000006bH
  001dd	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00012	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv71 = -232						; size = 4
__Ptr0$ = -32						; size = 4
__Facptr$ = -20						; size = 4
_this$ = -8						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 362  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  00010	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __EE4A1E85_xlocale
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 363  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00033	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00036	73 17		 jae	 SHORT $LN6@Getfacet
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00041	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  00044	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00047	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  0004d	eb 0a		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0004f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00059	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0005f	89 55 ec	 mov	 DWORD PTR __Facptr$[ebp], edx

; 364  :         if (_Facptr || !_Ptr->_Xparent) {

  00062	83 7d ec 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  00066	75 0e		 jne	 SHORT $LN3@Getfacet
  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  00072	85 d2		 test	 edx, edx
  00074	75 05		 jne	 SHORT $LN2@Getfacet
$LN3@Getfacet:

; 365  :             return _Facptr; // found facet or not transparent

  00076	8b 45 ec	 mov	 eax, DWORD PTR __Facptr$[ebp]
  00079	eb 23		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 366  :         }
; 367  : 
; 368  :         // look in current locale
; 369  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  0007b	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00080	89 45 e0	 mov	 DWORD PTR __Ptr0$[ebp], eax

; 370  :         if (_Id < _Ptr0->_Facetcount) {

  00083	8b 45 e0	 mov	 eax, DWORD PTR __Ptr0$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00089	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0008c	73 0e		 jae	 SHORT $LN4@Getfacet

; 371  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  0008e	8b 45 e0	 mov	 eax, DWORD PTR __Ptr0$[ebp]
  00091	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00094	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00097	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0009a	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN4@Getfacet:

; 372  :         }
; 373  : 
; 374  :         return nullptr; // no entry in current locale

  0009c	33 c0		 xor	 eax, eax
$LN1@Getfacet:

; 375  :     }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -220						; size = 4
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 339  :     ~locale() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __EE4A1E85_xlocale
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 340  :         if (_Ptr) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	74 5a		 je	 SHORT $LN5@locale

; 341  :             delete _Ptr->_Decref();

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8b f4		 mov	 esi, esp
  00040	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00043	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00046	ff d2		 call	 edx
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00055	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR $T1[ebp], 0
  0005c	74 25		 je	 SHORT $LN4@locale
  0005e	8b f4		 mov	 esi, esp
  00060	6a 01		 push	 1
  00062	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00068	8b 10		 mov	 edx, DWORD PTR [eax]
  0006a	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	ff d0		 call	 eax
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  00081	eb 0a		 jmp	 SHORT $LN5@locale
$LN4@locale:
  00083	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN5@locale:

; 342  :         }
; 343  :     }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -208						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 66   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d ec	 lea	 edi, DWORD PTR [ebp-20]
  0000f	b9 05 00 00 00	 mov	 ecx, 5
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __B2A50DF2_typeinfo
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 67   :     _THROW(bad_cast{});

  00025	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002b	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  00030	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00035	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Throw_bad_:

; 68   : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_cast@std@@UAE@XZ
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 153  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __851B68E1_vcruntime_typeinfo@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :         : exception("bad cast", 1)

  0002a	6a 01		 push	 1
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast@
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 153  :     {

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 154  :     }

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 471  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __31746AB4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 472  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 473  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 463  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __31746AB4_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 464  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR __Right$[ebp]
  0002b	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002d	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00039	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00043	0f b6 85 3c ff
	ff ff		 movzx	 eax, BYTE PTR tv65[ebp]

; 465  :     }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z PROC	; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 455  :     _NODISCARD static constexpr _Elem to_char_type(const int_type _Meta) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __31746AB4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 456  :         return static_cast<_Elem>(_Meta);

  00021	0f b6 45 08	 movzx	 eax, BYTE PTR __Meta$[ebp]

; 457  :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ENDP	; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __31746AB4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // ^^^ no u8 intrinsics ^^^
; 395  :         } else
; 396  : #endif // defined(__cpp_char8_t)
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 402  : #endif // ^^^ !_HAS_CXX17 ^^^
; 403  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	b9 04 00 00 00	 mov	 ecx, 4
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __85F4241F_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	74 0e		 je	 SHORT $LN3@what
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], edx
  0003f	eb 0a		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0004b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __85F4241F_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4

; 91   :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __85F4241F_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00033	33 c0		 xor	 eax, eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 c0 04	 add	 eax, 4
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004a	83 c1 04	 add	 ecx, 4
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ___std_exception_copy
  00053	83 c4 08	 add	 esp, 8

; 74   :     }

  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __85F4241F_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00033	33 c0		 xor	 eax, eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  00046	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 68   :     }

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\BSTU\2 семестр\КПО\Лабораторная 1 и 3\define_year\define_year\application.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0054FE25_application@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\BSTU\2 семестр\КПО\Лабораторная 1 и 3\define_year\define_year\application.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0054FE25_application@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
